using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using Newtonsoft.Json.Linq;
using System.Net;
using System.Net.Json;
using System.Net.Http;
using SecIotAgent.WEB;

namespace SecIotAgent.RESTAPI
{
    static class CSHAP_ICTK_DEVICE_DEFINE
    {
        public const string RequestChallenge = "{\"header\":{\"trId\":\"500301\"},\"body\":{\"uId\":\"TEST_EMUL_0001\"}}";
    }

    class CSHAP_ICTK_RestApiClass
    {
        string result = string.Empty;
        string TargetUrl = string.Empty;
        static CSHAP_ICTK_JSON_Class jsonclass = new CSHAP_ICTK_JSON_Class();


        public string Req_Challenge(string trId, string uId)
        {
            string ret = string.Empty;

            StringBuilder dataParams = new StringBuilder();
            var httpWebRequest = (HttpWebRequest)WebRequest.Create("https://43.200.98.151:8443/pqc3/device/public/challenge");

            httpWebRequest.ServerCertificateValidationCallback += (sender, certificate, chain, sslPolicyErrors) => true;
            httpWebRequest.Accept = "application/json";
            httpWebRequest.Method = "POST";
            httpWebRequest.ContentType = "application/json";

            string jsonappend = jsonclass.make_challenge_json(trId, uId);//jsonclass.MakeJsonSample();
            dataParams.Append(jsonappend);

            byte[] byteDataParams = UTF8Encoding.UTF8.GetBytes(dataParams.ToString());

            Stream dataStream = httpWebRequest.GetRequestStream();

            dataStream.Write(byteDataParams, 0, byteDataParams.Length);

            using (WebResponse response = httpWebRequest.GetResponse())
            using (Stream stream = response.GetResponseStream())
            using (StreamReader reader = new StreamReader(stream))
            {
                string json = reader.ReadToEnd();
                var obj = JObject.Parse(json);
                var header_list = obj["header"];
                var body_list = obj["body"];

                MessageBox.Show("result :" + header_list["rtnMessage"].ToString());
                MessageBox.Show("session ID :" + body_list["sessionId"].ToString());
                MessageBox.Show("challenge ID :" + body_list["challenge"].ToString());
            }

            return ret;
        }

        public string CSHAP_WebRequest()
        {
            string ret = string.Empty;

            StringBuilder dataParams = new StringBuilder();
            //dataParams.Append("{\"header\":{\"trId\":\"500301\"},\"body\":{\"uId\":\"TEST_EMUL_0001\"}}");

            ICTK_JSON_STRUCT json_struct = new ICTK_JSON_STRUCT();
            json_struct.Header.trId = "500302";
            json_struct.Body.authType = "0";
            json_struct.Body.uId = "TEST_EMUL_0001";
            json_struct.Body.sessionId = "e570f047-49c0-491c-9f9e-f7194a2d7fa6";// 직접 얻어와야 함
            json_struct.Body.signature.ecc.signAlgorithm = "ecdsa_with_sha256";
            json_struct.Body.signature.ecc.signature = "3046022100E1D4891EA16EF1C1D28E9B74348BFC87712A464CE17DF3B507D6416725DBC36A02210093E65FD47B907B3DF7AE65AF28DD6B8CE52CDE86CD7DB60471534AD314A8D447";
            json_struct.Body.signature.pqc.signAlgorithm = "dilithium2";
            json_struct.Body.signature.pqc.signature = "21E5BF4971C7E9EA9633DB8D2057A828D7A4A77ECA52CB929880EF2C9EA4486373DF25794E2F20F566A2DFE3DE6EB134DE471919EE9EA9BAD4F832BC6A10D1C3A94B833BF1D8CA84865386051E5D00BB5678097A8FED30A93E67CA2FD8557A1F3EF184B82B7746E2A6FC0E3DF376B66304F5B601439CDA096BEB32FC53103BF092C6D23C07BEBAF03D1321BC0FF212DF4C1C63D90C0218820D4983ED8EE5569669657CE936FD67B689B8CB7E1E1AD153EDCE32510E5AC3B820C26F3948DBFEE60C897320CACE3E2C0643016CFDFA394076652450E1A66327A8F3CA7BFFE3A206AD6D00BDEFD6F4F23A9CA2E6AD9877B8B67E42B91EC678DE93C34B67F824AB1C5EE18B317695949A840FBCBBC4B3B52DE86A6BBA8B3121E9F24062959EDC13DF020AB923163CF1D53617572808223A46479C4CAB9D061543D0D359D7F1A8558649C2BB57CC32B348E0BADEAD58B4163E160948D52DBD6C7E2F7E169130B66312ABD4CEA7C4AB0B5358469718B04C6C760E55F9B32FDEAA8405DA54A7DB33BA49D3B2712DB7BC19827138A02486C42F7BB288DDB02B0249643EBB8D77EA3C33F7ED8CC3D814331F26649577D8FBFF0A32E1EB53789CC3F82DD20562B0818E732E830E79410C06C9156B0B6F0ACB5BC26925B1565C78EDC189940DE4863CF5DE938304EF87C150D9A91D8F225F89DE55BDE2B1A32D8FDDCC9441DACEA12473F3F1494EAE8B2509C3D3FABF1B0F3505363703A071B760F16D7B381D92E1A8374668380E95BE59FBCB7239C054C17F405189ECA1C70D3C430A849FBF2F5FEB6CE34106A06BBEA01E97D06E025C6690717AAC7DF5D2E30387E7E931A17188D25B0417F4BF382573163B369F448921667D8ED61F56DA043936A89A4ACE1906894F242E1928B6CC10EA1EDC86F0320F40AF29154FEC2ED1A3D3382D790D89A2E570C7015BBE9AF9CC890A56DD9E12E27579045B54CB83764297A4758ECB17027A20D8D25175406D66EF42F706F7B4ADEC2D51F8E18ADD27CCEFFBE8D59EF7F94FBBF9DA88CF83DA47BA80E356BBFAA6AAAB9CA7FB4A1A1D7703B2BC7BCEFA8F0744E135A9C8636B64E5175556ED11CEDC28E2AAD8B436A9E7EE9F30562D5A9CC0D481A9727F280FED4FDA7ED27BB6B146468F8A17E530DEC6903BB9F9C0BD53C0BF70582BC3487E8A0C7AD8CCE7DFE67820CB3B478D0651BBE5D28910FFCB1660C85129AEDC30A2B36A26FD334657324F8A4976B448029A18AAE3F282C636C75E2D7EBF1F8686898B16DD48BBEEDD502E29B65EDE357CB684FF6AD4BF51FB1DD6BCE5B210158BCA63E69B49B184FAF9A019D2C5AEE1413614BD32FBA504A3E47ED9F8C8848D55A85A6DCACF3684358A3BED4257844C84CBA06898F7B2527AE471E4D86CACDE639F53479013788F5D6AC9890A495EF97746AEC1BB4F39D75036CF25A1D909BA358634165D2A590AAD10891C194EA1784F10A62F75F4D167419DB709C17D83C69D37348FE6540C1CD9B9796EDF3BB2C4A512B16CB2A9573FAB1DA5117647CC36CA5646B315E1F711315F83A98F13E20CE8FACAD178359F3C927A671A97FC7B12503A45ED853C721BB2BA003F1F3E3EDF1DB32C9924D0F0DC10B7AF9EB96D72D286B1CBDF97B0FD0EF1EF129384DEFF38771D471D8CB10DA919F970B57B062F05AAD56D093A7B7E007AB5FBDB67C09E90BF2BBE1ABB1B12FBFBCB33430E21B6613AF78970A8F968F92B0F658FD8BE5118C822B02073B2C1E93DFBD9D85345C4A53D77593DB2A5B62DF5A04A20C046FA99DF94F1C928019C00D493FC8C26BA2F4D381DA0463602CBC5E8CBAA470F66ED8CC397D3CAAC80A61B5E4CAD385E81C4118CAF354B4980B75C246DE7CF0358173EF03AF5EE072826B744085AF41DC6CC6C5E66AEC13B214DD79708C6374A5441F43289FE698A001BA2A228F08C75B281953AE68BE56F1FCA62EE4AD81B262F1341519192FFD4FA1B66507A78F49F851D691F4C463F67EE29C837E8DB53B6C8C75AED1659A33B424E95342AAD334B969D367E22D72FD7E8697DDC6169E8F12F74B9B7E48F2D2A07064495DEF853B298866E5BE8FA12819BEAB646150E74B4F833A539F82E40366096FFA69B275E4C528FAFD8A75992D30CF80EEDD951104FB2F54CA134B38F8FC1729A0637DF4E5BB7986F5BD6B0786DD8388262C19830CE93671E349D9954E62E87805C4D941F5BDB43BD039DB0D79FEC69E54884CCFCA560D75E4AA2614C59D09A90EF363293CE56846D7D3EA6E5AD5C63DE4024C69564AD1B2B879EFD33AC57D1527EA7A6C25CC1CA0C64889D4A12D589338A842F488552676E00840FF1C008C8338915843759BB21186F30A3E5D93003D911CBC080D5330CDE36B3C1CDA6FDF7C4E4134B3708D7295DDF2DEB700C944536D1FEA74E787501B1118E0A723618FF34BB1F4971C8533C628AEBB594EDD74A0D99232132A5F72AEC38751D0FCCC285BFFB9CD7149269742921B4BA095A8875D0EF33DC80A7A3E15BD2BF3C302B45D293EF7BF7C5130ECB9D2E134E9A9D4C6E635C1A0F8D8C78E6E35C35DAA03A134E61DA95453E55B6C18CDCD614E63BF1A0A00D944371D6E8182E3E443CBD010EBFBDF550CC6284FA93E34CAD0FE1F92C04C4E6BD06183BC6CD4D09FC2FC0C4BF69554A52FB71544161B6464E674231C5EE1BAAAA5F09E4B7687E8F2DE56D520B73F5819321CD5FCDC848F6313AC94DAF6446FC17805C40850F804B2A4AD0B43B9609EADCA17BFA2232466D175ABD7D8F5D11AECF0560521DCCC00BB3787BEA57D27D292CDECF6E70F437712DDD60DE2574412101E511FBA75BDB56773C50AF84077CBB4CA4437123C9B0AE3B022A0C21A67ACC8D2832B97D81034297C679A32758A231FAF699D95BBA6C1C48176B1BAEB2F04B19E9503BD8BAE9D9F5EB6ECA67C8B44CA057FDC0F147A1B6A6EA95AE98D4C84063F20E588B50ED12341D11CEEFFD1FE68CEA458232C6E8BAF7C837F30EF62FB0FB2E5D79835B978CBF47F9C7B906ED2296CD7EDF0B14BEC2DB8EC1E4E956195A842B13CBC1584CCCA7A54309243EED13C09B66DB55AA3C3E519E599BDC70A3B866F5217328D3F039C2C592DCAC9DFCF4CBA8919843BD129E24C3DD464F7A481840BF995CFEB518584DAAE1361C30A7DDB444D2A800AE5F8D5D4115576305449D1DAF74539DB988406645304C5415400904A63602EBF77F37B4F2A3B95D616FF8195C2E88361D75A3B4B8A68CB6D757A19EB6EAD26E92B823E84866768E0D039B0848BD4E744A8E60F4A0B675D11334FC56DED59E140555576263718488A1ABB4B6C9CFFD0E112329455056738D989AA2ABD3E8EBF4F90E232F303A4B535B66989FA1BDD8F0051C3942575B6C6F798DA9B7C2D0EF00000000000000000000000000000000000F21303F";
            json_struct.Body.initCertInfo.caCrtId = "445C6F1879682EEED03FE17C1098B82DA6256452";
            json_struct.Body.initCertInfo.dvcCrtId = "D9308FEF6E3C028AF0EF90C43005ADD11E5169EC";
            json_struct.Body.initCertInfo.dvcCrt = "-----BEGIN CERTIFICATE-----\n\tMIIQ+TCCByCgAwIBAgIUCWAoSADL6Wo8iDikTPnLT5fTjuQwCgYIKoMa6TwEAwEw\ndzELMAkGA1UEBhMCS1IxDTALBgNVBAoMBElDVEsxWTBXBgNVBAMMUElDVEstSU5J\nVC1DQS1DTi1mZDFlYjkxZTJkYzgwZGRhMjY5ODZhZjNjZjQzMDIxYTdiNjc0MDUw\nMDk0Yzg4YWJlM2ZlYTFiZWU2NTQ3ZWM2MBoXCzIyMDcwNjAwMDBaFwszMjA3MDMw\nMDAwWjB4MQswCQYDVQQGEwJLUjENMAsGA1UECgwESUNUSzFaMFgGA1UEAwxRSUNU\nSy1JTklULURWQy1DTi05MjQ3NjE0ODNkOGE2MjRkZDcwODk0ZTcxNjNkNDQxYWUw\nZTVjYWQ2YzIwZGFhYTg5MDRjNGY0NjZlMzQ0ZjNiMIIFqzAeBgcqgxrpPAIBMBMG\nByqDGuk8AwEGCCqGSM49AwEHA4IFhwAwggWCBIIFIEmya9hYWeQ56wt+xiwYVqEx\nhKklFIm8BExk6wROFApchrhsMlN61dmmqQTE3EyDqfJroSmFUYsWVIkMqt9VxXbr\n4Xq1obCwFJG4vUnLG2unxI0Zzedbw3YzyTtrbGypXsoGe1GWxPBoaohefhOQSz2y\nXNM73pGGbiaCmt3bsKNVXU7ozQ0WYCAVBTISiv6VM9smfR4Aqbf0MgT4DKe530MO\nhFdJimyWPMueOoU/1+p3wwfuucsIl3GvIbvI64RzQfPxYNwhlzNxzcHuqRQUJOAH\nxTaDiu8NAtzT/V3eL4GDfBX7a0q9KKvSyJ3oPGKpL8ur15pyytpKJ4pgVswxneRf\nfHDsNQ30CAsq8UvNQtH1MLYVhOmbwVbKTLctXxuMcnYOADITnGH9je7iQF8OCUtV\nD9HIO8SdHyVbfdz6taW5+FoteIaet1VsaEBx1Z+gmU2ICpuX9fBJ031/A1Vgn8Ld\nYuMkKtPYlr7MSCezGCqvvWAvNIk2YKcMdwil/KPmwlDufSL4xyeVvXhIvVPaIkfa\nUPMvOp74sglKEIFBsgvLOgjDZPp57HQ9brabryWJ++whxOLv21GJUfxny5rrXFiX\ntKP6JAzCTQNRaT9sJcWkBr2sXtctIo1zOqL7TXUkZejpIHVWaZ6x9HymxlbwSMKV\nVJGGYVrcCM5QSx+2FRy05eM9uVEzYxs7Xmi001/wOQcsIijQG3eLY/Yd7bDEKmhH\n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\njcj762M8UcK579yK5GRH4h9V26RF/962GcpCPoI=\n\t-----END CERTIFICATE-----\n\t";

            string jsonappend = jsonclass.make_auth_json(json_struct);//jsonclass.MakeJsonSample();
            dataParams.Append(jsonappend);

            byte[] byteDataParams = UTF8Encoding.UTF8.GetBytes(dataParams.ToString());

            //var httpWebRequest = (HttpWebRequest)WebRequest.Create("https://43.200.98.151:8443/pqc3/device/public/challenge");
            var httpWebRequest = (HttpWebRequest)WebRequest.Create("https://43.200.98.151:8443/pqc3/device/public/auth");

            //self sign !!!!!!!!!!!!!!!!!!!!!!!
            httpWebRequest.ServerCertificateValidationCallback += (sender, certificate, chain, sslPolicyErrors) => true;
            httpWebRequest.Accept = "application/json";
            httpWebRequest.Method = "POST";
            httpWebRequest.ContentType = "application/json";

            Stream dataStream = httpWebRequest.GetRequestStream();

            dataStream.Write(byteDataParams, 0, byteDataParams.Length);

            using (WebResponse response = httpWebRequest.GetResponse())
            using (Stream stream = response.GetResponseStream())
            using (StreamReader reader = new StreamReader(stream))
            {
                string json = reader.ReadToEnd();
                var obj = JObject.Parse(json);
                var header_list = obj["header"];
                var body_list = obj["body"];
                
                MessageBox.Show("result :" + header_list["rtnMessage"].ToString());
                MessageBox.Show("session ID :" + body_list["sessionId"].ToString());
                MessageBox.Show("challenge ID :" + body_list["challenge"].ToString());
            }
    
            return string.Empty;
        }

        public dynamic? CSHAP_WebResponse(string Url, string Method, string ContentType, string TarJOSN_ObjectName)
        {
            try
            {
                if (string.IsNullOrEmpty(Url) || string.IsNullOrEmpty(Method) || string.IsNullOrEmpty(ContentType) || string.IsNullOrEmpty(TarJOSN_ObjectName))
                {
                    return null;
                }

#pragma warning disable SYSLIB0014 // 형식 또는 멤버는 사용되지 않습니다.
                WebRequest request = WebRequest.Create(Url);
#pragma warning restore SYSLIB0014 // 형식 또는 멤버는 사용되지 않습니다.
                request.Method = "POST";
                request.Headers[HttpRequestHeader.Authorization] = "Bearer " + "eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiJ9.eyJpc3MiOiJJQ1RLIiwiVVNFUl9JRCI6ImY4YjcyOTVlNzFmNjQyYTc2Yjc4ZTU0ZDg1ZjU1MjkxMzNhY2E5ODQ3MTI4ZjhjN2QwYzM4ZjQyZTdkYjY3YjgiLCJleHAiOjIwMTc1OTI4MzcsIlVTRVJfTEVWRUwiOiJBUElVU0VSIn0.FDDUUO2MQZNjmO9cqmiKUnqt0sN87I_Plnm0yUJrL18ohBjZiDaYE4IeKKbw0CRhTx7zBppBGRkNdoeAfhRrFg";
                request.Headers[ContentType] = "application/json";

                using (WebResponse response = request.GetResponse())
                using (Stream stream = response.GetResponseStream())
                using (StreamReader reader = new StreamReader(stream))
                {
                    string data = reader.ReadToEnd();
                    var obj = JObject.Parse(data);
                    var list = obj[TarJOSN_ObjectName];

                    if (list != null)
                    {
                        MessageBox.Show(obj["code"].ToString());
                        MessageBox.Show(obj["message"].ToString());

                        return list;
                    }
                }
            }
            catch (Exception)
            {
                //ERROR
                return null;
            }

            return null;
        }
    }
}
